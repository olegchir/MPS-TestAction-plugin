package TestLanguage.plugin;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SModel;
import java.awt.Frame;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import javax.swing.JDialog;
import java.awt.Dialog;
import javax.swing.JList;
import javax.swing.JScrollPane;
import java.awt.BorderLayout;
import javax.swing.JButton;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * Helper class for displaying of Model Selection Dialog - just a list of models and button for generation of classes
 */
public class ModelSelectionDialog {
  public static final String SELECT_MODELS_TITLE = "Select models";
  public static final int SELECT_MODELS_DIALOG_WIDTH = 640;
  public static final int SELECT_MODELS_DIALOG_HEIGHT = 300;
  public static final String SELECT_MODELS_DIALOG_BUTTON_CAPTION = "Generate TestClass for selected models";
  public static final int SELECT_MODELS_DIALOG_BUTTON_WIDTH = 50;
  public static final int SELECT_MODELS_DIALOG_BUTTON_HEIGHT = 50;

  /**
   * Show Model Selection Dialog
   * 
   * @param event current action event
   * @param _params previously generated map of parameters
   * @param models models to display on a list
   * @param modelsSelectionActionListener listener that holds method of model processing
   */
  public static void show(final AnActionEvent event, final Map<String, Object> _params, HashSet<SModel> models, final ModelsSelectionActionListener modelsSelectionActionListener) {

    // Get MPS UI frame 
    final Frame mpsBaseFrame = (Frame) (MapSequence.fromMap(_params).get(ProjectHelper.ACTION_PROPERTY_FRAME));

    // Create dialog 
    final JDialog dialog = new JDialog(mpsBaseFrame, Dialog.ModalityType.APPLICATION_MODAL);
    dialog.setTitle(SELECT_MODELS_TITLE);
    dialog.setSize(SELECT_MODELS_DIALOG_WIDTH, SELECT_MODELS_DIALOG_HEIGHT);

    // Create special sorting list model for JList, put models into it, and that assign it to a new JList 
    ModelInfoItem[] srcItems = ModelInfoItem.arrayFromSModels(models);
    SortingModelInfoListModel jlistModel = new SortingModelInfoListModel();
    jlistModel.addAll(srcItems);
    final JList jlist = new JList(jlistModel);

    // Create scroll pane for this JList (it can be very long) and fill space with it 
    JScrollPane jsp = new JScrollPane(jlist);
    dialog.add(jsp, BorderLayout.CENTER);

    // Create button, but it on the bottom of Dialog 
    final JButton btn = new JButton(SELECT_MODELS_DIALOG_BUTTON_CAPTION);
    btn.setPreferredSize(new Dimension(SELECT_MODELS_DIALOG_BUTTON_WIDTH, SELECT_MODELS_DIALOG_BUTTON_HEIGHT));
    dialog.add(btn, BorderLayout.SOUTH);

    // Add action for this button - check if selection is not empty, and pass this selection to the class generator 
    btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        if (!(jlist.isSelectionEmpty())) {
          HashSet<SModel> approvedModels = ModelInfoItem.modelsFromJList(jlist);
          dialog.setVisible(false);
          modelsSelectionActionListener.actionPerformed(event, _params, mpsBaseFrame, dialog, null, approvedModels);
        }
      }
    });

    // Center dialog on the screen, make it modal and show 
    ScreenHelper.centerOnScreen(dialog, true);
    dialog.setModal(true);
    dialog.setVisible(true);
  }
}
