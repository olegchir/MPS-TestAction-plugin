package TestLanguage.plugin;

/*Generated by MPS */

import javax.swing.AbstractListModel;
import java.util.Comparator;
import java.util.TreeSet;
import java.util.Collection;
import java.util.Arrays;
import java.util.Iterator;

/**
 * Sorting ListModel for ModelInfoItem (it is used with JList)
 * (Minor adoption of this: http://www.jguru.com/faq/view.jsp?EID=15245)
 */
public class SortingModelInfoListModel extends AbstractListModel {
  private static Comparator INTERNAL_COMPARATOR = new ModelInfoItemComparator();

  private TreeSet model;


  public SortingModelInfoListModel() {
    model = new TreeSet(INTERNAL_COMPARATOR);
  }




  public int getSize() {
    //  ListModel methods 
    //  Return the model size 
    return model.size();
  }

  public Object getElementAt(int index) {
    //  Return the appropriate element 
    return model.toArray()[index];
  }

  public void addElement(Object element) {
    //  Other methods 
    if (model.add(element)) {
      fireContentsChanged(this, 0, getSize());
    }
  }

  public void addAll(Object[] elements) {
    Collection c = Arrays.asList(elements);
    model.addAll(c);
    fireContentsChanged(this, 0, getSize());
  }

  public void clear() {
    model.clear();
    fireContentsChanged(this, 0, getSize());
  }

  public boolean contains(Object element) {
    return model.contains(element);
  }

  public Object firstElement() {
    //  Return the appropriate element 
    return model.first();
  }

  public Iterator iterator() {
    return model.iterator();
  }

  public Object lastElement() {
    //  Return the appropriate element 
    return model.last();
  }

  public boolean removeElement(Object element) {
    boolean removed = model.remove(element);
    if (removed) {
      fireContentsChanged(this, 0, getSize());
    }
    return removed;
  }


}
